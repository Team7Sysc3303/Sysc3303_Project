 public void listener()
   
   {
	   byte [] data;
	   int i, s, counter=0;
	   String filename, mode;
	   Request req; // READ, WRITE or ERROR
	   
	   for(;;) { // loop forever
	         // Construct a DatagramPacket for receiving packets up
	         // to 100 bytes long (the length of the byte array).
	         
	         data = new byte[100];
	         receivePacket = new DatagramPacket(data, data.length);
	         
	         System.out.println("Server: Waiting for packet.");
	         // Block until a datagram packet is received from receiveSocket.
	         try {
	            receiveSocket.receive(receivePacket);
	         } catch (IOException e) {
	            e.printStackTrace();
	            System.exit(1);
	         }
	         
	         // Process the received datagram.
	         System.out.println("Server: Packet received:");
	         System.out.println("From host: " + receivePacket.getAddress());
	         System.out.println("Host port: " + receivePacket.getPort());
	         int len = receivePacket.getLength();
	         System.out.println("Length: " + len);
	         System.out.println("Containing: " );
	         
	         // print the bytes
	         for ( i=0;i<len;i++) {
	            System.out.println("byte " + i + " " + data[i]);
	         }

	         // Form a String from the byte array.
	         String received = new String(data,0,len);
	         System.out.println(received);
	         
	      // If it's a read, send back DATA (03) block 1
	         // If it's a write, send back ACK (04) block 0
	         // Otherwise, ignore it
	         if (data[0]!=0) req = Request.ERROR; // bad
	         else if (data[1]==1) req = Request.READ; // could be read
	         else if (data[1]==2) req = Request.WRITE; // could be write
	         else req = Request.ERROR; // bad

	         if (req!=Request.ERROR) { // check for filename
	             // search for next all 0 byte
	             for(i=2;i<len;i++) {
	                 if (data[i] == 0) break;
	            }
	            if (i==len) req=Request.ERROR; // didn't find a 0 byte
	            if (i==2) req=Request.ERROR; // filename is 0 bytes long
	            // otherwise, extract filename
	            filename = new String(data,2,i-2);
	         }
	 
	         if(req!=Request.ERROR) { // check for mode
	             // search for next all 0 byte
	             for(s=i+1;s<len;s++) { 
	                 if (data[s] == 0) break;
	            }
	            if (s==len) req=Request.ERROR; // didn't find a 0 byte
	            if (s==i+1) req=Request.ERROR; // mode is 0 bytes long
	            mode = new String(data,i,s-i-1);
	         }
	         
	         if(s!=len-1) req=Request.ERROR; // other stuff at end of packet   
	         	
	         Thread responseThread = new Thread (new ResponseHandler(req, receivePacket), "ThreadSend"+counter);
	         counter ++;
	         
	   
	   }
   }
   
   
